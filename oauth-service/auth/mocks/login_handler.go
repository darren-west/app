// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/darren-west/app/oauth-service/auth (interfaces: LoginHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	auth "github.com/darren-west/app/oauth-service/auth"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockLoginHandler is a mock of LoginHandler interface
type MockLoginHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLoginHandlerMockRecorder
}

// MockLoginHandlerMockRecorder is the mock recorder for MockLoginHandler
type MockLoginHandlerMockRecorder struct {
	mock *MockLoginHandler
}

// NewMockLoginHandler creates a new mock instance
func NewMockLoginHandler(ctrl *gomock.Controller) *MockLoginHandler {
	mock := &MockLoginHandler{ctrl: ctrl}
	mock.recorder = &MockLoginHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoginHandler) EXPECT() *MockLoginHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockLoginHandler) Handle(arg0 auth.UserInfo, arg1 http.ResponseWriter, arg2 *http.Request) {
	m.ctrl.Call(m, "Handle", arg0, arg1, arg2)
}

// Handle indicates an expected call of Handle
func (mr *MockLoginHandlerMockRecorder) Handle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockLoginHandler)(nil).Handle), arg0, arg1, arg2)
}
