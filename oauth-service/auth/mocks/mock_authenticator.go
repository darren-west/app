// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/darren-west/app/oauth-service/auth (interfaces: Authenticator)

// Package mocks is a generated GoMock package.
package mocks

import (
	auth "github.com/darren-west/app/oauth-service/auth"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockAuthenticator is a mock of Authenticator interface
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// OnAuthenticated mocks base method
func (m *MockAuthenticator) OnAuthenticated(arg0 http.ResponseWriter, arg1 auth.UserInfo) {
	m.ctrl.Call(m, "OnAuthenticated", arg0, arg1)
}

// OnAuthenticated indicates an expected call of OnAuthenticated
func (mr *MockAuthenticatorMockRecorder) OnAuthenticated(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAuthenticated", reflect.TypeOf((*MockAuthenticator)(nil).OnAuthenticated), arg0, arg1)
}

// RetrieveUser mocks base method
func (m *MockAuthenticator) RetrieveUser(arg0 *http.Client) (auth.UserInfo, error) {
	ret := m.ctrl.Call(m, "RetrieveUser", arg0)
	ret0, _ := ret[0].(auth.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUser indicates an expected call of RetrieveUser
func (mr *MockAuthenticatorMockRecorder) RetrieveUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUser", reflect.TypeOf((*MockAuthenticator)(nil).RetrieveUser), arg0)
}
